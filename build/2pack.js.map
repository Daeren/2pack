{"version":3,"sources":["2packES6.js"],"names":["packer","module","Uint8Array","prototype","slice","Object","defineProperty","Array","bPack","holyBuffer","Buffer","MAX_ARGUMENTS_LENGTH","K_MAX_LENGTH","allocUnsafe","allocUnsafeSlow","byteLength","create","write","toString","length","RangeError","buf","string","utf8ToBytes","offset","remaining","blitBuffer","encoding","start","end","utf8Slice","units","Infinity","codePoint","leadSurrogate","bytes","i","charCodeAt","push","Error","Math","min","res","firstByte","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","swap","b","n","m","codePoints","len","String","fromCharCode","apply","isBigEndian","a","Uint32Array","buffer","byteOffset","isBE","isLE","schema","holderRecreated","dataHolderAsArray","TYPE_BIN","TYPE_STR","TYPE_INT","TYPE_UINT","TYPE_FLOAT","TYPE_JSON","schemaContNames","isArray","some","e","split","schemaDontContNames","isPrimitive","schLen","fields","buffers","zeroUI16","pktOffset","pktDataBuf","pktDataHolderArr","pktDataHolderObj","pktDynamicSize","pktMinSize","pktMaxSize","name","shift","subType","type","getTypeId","replace","size","parseInt","buildTypedBuf","bufType","bufAType","bufBytes","bufABytes","minSize","maxSize","value","pack","unpack","data","target","outTg","fieldIdx","pktSize","input","field","JSON","stringify","isNaN","isFinite","reverse","tIdx","bin","cbEndInfo","asCopy","asArray","curOffset","pktOffsetStart","byteLen","from","call","parse","Uint16Array","BYTES_PER_ELEMENT","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","src","dst","dstLen","srcLen","t","exports"],"mappings":"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","file":"2pack.js","sourcesContent":["const packer = (function(module) {\r\n                        if(!Uint8Array.prototype.slice) {\r\n                            Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n                                \"value\": Array.prototype.slice\r\n                            });\r\n                        }\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------\r\n\r\nconst bPack = (function() {\r\n    const holyBuffer = (typeof(Buffer) !== \"undefined\" ? Buffer : (function() {\r\n            const MAX_ARGUMENTS_LENGTH = 0x1000;\r\n            const K_MAX_LENGTH = 0x7fffffff;\r\n\r\n            //---------------------]>\r\n\r\n            return (function() {\r\n                const Buffer = function() {};\r\n\r\n                //--------]>\r\n\r\n                Buffer.allocUnsafe = allocUnsafe;\r\n                Buffer.allocUnsafeSlow = allocUnsafe;\r\n                Buffer.byteLength = byteLength;\r\n\r\n                Buffer.prototype = Object.create(null);\r\n                Buffer.prototype.write = write;\r\n                Buffer.prototype.toString = toString;\r\n\r\n                //--------]>\r\n\r\n                return Buffer;\r\n\r\n                //--------]>\r\n\r\n                function allocUnsafe(length) {\r\n                    if(length > K_MAX_LENGTH) {\r\n                        throw new RangeError(\"Invalid typed array length\");\r\n                    }\r\n\r\n                    const buf = new Uint8Array(length);\r\n\r\n                    // buf.__proto__ = Buffer.prototype;\r\n                    buf.write = Buffer.prototype.write;\r\n                    buf.toString = Buffer.prototype.toString;\r\n\r\n                    return buf;\r\n                }\r\n\r\n                function byteLength(string) {\r\n                    return utf8ToBytes(string).length;\r\n                }\r\n\r\n                //----)>\r\n\r\n                function write(string, offset, length) {\r\n                    offset = offset || 0;\r\n                    length = length || this.length;\r\n\r\n                    const remaining = this.length - offset;\r\n\r\n                    if(!length || length > remaining) {\r\n                        length = remaining;\r\n                    }\r\n\r\n                    return blitBuffer(utf8ToBytes(string, this.length - offset), this, offset, length);\r\n                }\r\n\r\n                function toString(encoding, start, end) {\r\n                    start = start || 0;\r\n                    end = end || this.length;\r\n\r\n                    return end === 0 ? \"\" : utf8Slice(this, start, end);\r\n                }\r\n            })();\r\n\r\n            //---------------------]>\r\n\r\n            function utf8ToBytes(string, units) {\r\n                units = units || Infinity;\r\n\r\n                const length = string.length;\r\n\r\n                let codePoint;\r\n                let leadSurrogate = null;\r\n                let bytes = new Array();\r\n\r\n                for(let i = 0; i < length; ++i) {\r\n                    codePoint = string.charCodeAt(i);\r\n\r\n                    // is surrogate component\r\n                    if(codePoint > 0xD7FF && codePoint < 0xE000) {\r\n                        // last char was a lead\r\n                        if(!leadSurrogate) {\r\n                            // no lead yet\r\n                            if(codePoint > 0xDBFF) {\r\n                                // unexpected trail\r\n                                if((units -= 3) > -1) {\r\n                                    bytes.push(0xEF, 0xBF, 0xBD);\r\n                                }\r\n\r\n                                continue;\r\n                            }\r\n                            else if(i + 1 === length) {\r\n                                // unpaired lead\r\n                                if((units -= 3) > -1) {\r\n                                    bytes.push(0xEF, 0xBF, 0xBD);\r\n                                }\r\n\r\n                                continue;\r\n                            }\r\n\r\n                            // valid lead\r\n                            leadSurrogate = codePoint;\r\n\r\n                            continue;\r\n                        }\r\n\r\n                        // 2 leads in a row\r\n                        if(codePoint < 0xDC00) {\r\n                            if((units -= 3) > -1) {\r\n                                bytes.push(0xEF, 0xBF, 0xBD);\r\n                            }\r\n\r\n                            leadSurrogate = codePoint;\r\n\r\n                            continue;\r\n                        }\r\n\r\n                        // valid surrogate pair\r\n                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\r\n                    }\r\n                    else if(leadSurrogate) {\r\n                        // valid bmp char, but last char was a lead\r\n                        if((units -= 3) > -1) {\r\n                            bytes.push(0xEF, 0xBF, 0xBD);\r\n                        }\r\n                    }\r\n\r\n                    leadSurrogate = null;\r\n\r\n                    // encode utf8\r\n                    if(codePoint < 0x80) {\r\n                        if((units -= 1) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(codePoint);\r\n                    }\r\n                    else if(codePoint < 0x800) {\r\n                        if((units -= 2) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0x6 | 0xC0,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    }\r\n                    else if(codePoint < 0x10000) {\r\n                        if((units -= 3) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0xC | 0xE0,\r\n                            codePoint >> 0x6 & 0x3F | 0x80,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    }\r\n                    else if(codePoint < 0x110000) {\r\n                        if((units -= 4) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0x12 | 0xF0,\r\n                            codePoint >> 0xC & 0x3F | 0x80,\r\n                            codePoint >> 0x6 & 0x3F | 0x80,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    }\r\n                    else {\r\n                        throw new Error(\"Invalid code point\");\r\n                    }\r\n                }\r\n\r\n                return bytes;\r\n            }\r\n\r\n            function utf8Slice(buf, start, end) {\r\n                end = Math.min(buf.length, end);\r\n\r\n                const res = new Array();\r\n                let i = start;\r\n\r\n                while(i < end) {\r\n                    let firstByte = buf[i];\r\n                    let codePoint = null;\r\n                    let bytesPerSequence = (firstByte > 0xEF) ? 4\r\n                        : (firstByte > 0xDF) ? 3\r\n                            : (firstByte > 0xBF) ? 2\r\n                                : 1;\r\n\r\n                    if(i + bytesPerSequence <= end) {\r\n                        let secondByte, thirdByte, fourthByte, tempCodePoint;\r\n\r\n                        switch(bytesPerSequence) {\r\n                            case 1:\r\n                                if(firstByte < 0x80) {\r\n                                    codePoint = firstByte;\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 2:\r\n                                secondByte = buf[i + 1];\r\n\r\n                                if((secondByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0x7F) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 3:\r\n                                secondByte = buf[i + 1];\r\n                                thirdByte = buf[i + 2];\r\n\r\n                                if((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 4:\r\n                                secondByte = buf[i + 1];\r\n                                thirdByte = buf[i + 2];\r\n                                fourthByte = buf[i + 3];\r\n\r\n                                if((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n                        }\r\n                    }\r\n\r\n                    if(codePoint === null) {\r\n                        // we did not generate a valid codePoint so insert a\r\n                        // replacement char (U+FFFD) and advance only 1 byte\r\n                        codePoint = 0xFFFD;\r\n                        bytesPerSequence = 1;\r\n                    }\r\n                    else if(codePoint > 0xFFFF) {\r\n                        // encode to utf16 (surrogate pair dance)\r\n                        codePoint -= 0x10000;\r\n                        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\r\n                        codePoint = 0xDC00 | codePoint & 0x3FF;\r\n                    }\r\n\r\n                    res.push(codePoint);\r\n                    i += bytesPerSequence;\r\n                }\r\n\r\n                return decodeCodePointsArray(res);\r\n            }\r\n\r\n            //--------)>\r\n\r\n            function swap(b, n, m) {\r\n                const i = b[n];\r\n\r\n                b[n] = b[m];\r\n                b[m] = i;\r\n            }\r\n\r\n            function decodeCodePointsArray(codePoints) {\r\n                const len = codePoints.length;\r\n\r\n                if(len <= MAX_ARGUMENTS_LENGTH) {\r\n                    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\r\n                }\r\n\r\n                // Decode in chunks to avoid \"call stack size exceeded\".\r\n                let res = \"\";\r\n                let i = 0;\r\n\r\n                while(i < len) {\r\n                    res += String.fromCharCode.apply(\r\n                        String,\r\n                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\r\n                    );\r\n                }\r\n\r\n                return res;\r\n            }\r\n        })());\r\n\r\n    //-------------------------]>\r\n\r\n    const isBigEndian = (function() {\r\n        const a = new Uint32Array([0x12345678]);\r\n        const b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\r\n\r\n        return b[0] === 0x12;\r\n    })();\r\n\r\n    //-------------------------]>\r\n\r\n    create.isBE = isBigEndian;\r\n    create.isLE = !isBigEndian;\r\n\r\n    return create;\r\n\r\n    //-------------------------]>\r\n\r\n    function create(schema, holderRecreated, dataHolderAsArray) {\r\n        const TYPE_BIN      = 1;\r\n        const TYPE_STR      = 2;\r\n        const TYPE_INT      = 4;\r\n        const TYPE_UINT     = 8;\r\n        const TYPE_FLOAT    = 16;\r\n        const TYPE_JSON     = 32;\r\n\r\n        //-----------------]>\r\n\r\n        if(!schema) {\r\n            schema = [];\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        const schemaContNames = Array.isArray(schema) ? schema.some((e) => e.split(\":\").length >= 2) : false;\r\n        const schemaDontContNames = Array.isArray(schema) ? schema.some((e) => e.split(\":\").length < 2) : true;\r\n\r\n        //-----------------]>\r\n\r\n        if(schemaContNames && schemaDontContNames) {\r\n            throw new Error(\"A schema has mixed names/types\");\r\n        }\r\n\r\n        if(schemaDontContNames) {\r\n            dataHolderAsArray = true;\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        const isPrimitive   = typeof(schema) === \"string\";\r\n        const schLen        = isPrimitive ? 1 : schema.length;\r\n\r\n        const fields        = new Array(schLen);\r\n        const buffers       = new Array(schLen);\r\n\r\n        const zeroUI16      = new Uint8Array(2);\r\n\r\n        let pktOffset       = 0,\r\n\r\n            pktDataBuf      = null,\r\n            pktDataHolderArr= new Array(),\r\n            pktDataHolderObj= Object.create(null),\r\n            pktDynamicSize  = false,\r\n\r\n            pktMinSize      = 0,\r\n            pktMaxSize      = 0;\r\n\r\n        //-----------------]>\r\n\r\n        for(let e, i = 0; i < schLen; ++i) {\r\n            e = isPrimitive ? [\"\", schema] : schema[i].split(\":\");\r\n\r\n            //---------]>\r\n\r\n            const name = e.length < 2 ? null : e.shift();\r\n            const subType = e.shift();\r\n\r\n            const type = getTypeId(subType.replace(/[\\d\\[\\]]/g, \"\"));\r\n            const size = parseInt(subType.replace(/\\D/g, \"\"), 10) || 0;\r\n\r\n            const [\r\n                bytes,   // BYTES_PER_ELEMENT\r\n                bufType, // dataView\r\n                bufAType // dataSizeView\r\n            ] = buildTypedBuf(type, size);\r\n\r\n            const bufBytes = ((type & TYPE_STR) || (type & TYPE_BIN)) ? null : new Uint8Array(bufType.buffer);\r\n            const bufABytes = bufAType ? new Uint8Array(bufAType.buffer) : null;\r\n\r\n            //---------]>\r\n\r\n            fields[i] = [name, type, bytes, bufType, bufBytes, bufAType, bufABytes];\r\n\r\n            pktMinSize += bytes;\r\n            pktMaxSize += bufType.byteLength;\r\n\r\n            if(!pktDynamicSize && ((type & TYPE_STR) || (type & TYPE_BIN))) {\r\n                pktDynamicSize = true;\r\n            }\r\n        }\r\n\r\n        offset(0);\r\n\r\n        //-----------------]>\r\n\r\n        return {\r\n            get minSize() { return pktMinSize; },\r\n            get maxSize() { return pktMaxSize; },\r\n\r\n            get offset() { return pktOffset; },\r\n            set offset(value) { offset(value); },\r\n\r\n            pack,\r\n            unpack\r\n        };\r\n\r\n        //-----------------]>\r\n\r\n        function offset(value) {\r\n            value = parseInt(value, 10) || 0;\r\n\r\n            pktMinSize = (pktMinSize - pktOffset) + value;\r\n            pktMaxSize = (pktMaxSize - pktOffset) + value;\r\n            pktOffset = value;\r\n\r\n            pktDataBuf = holyBuffer.allocUnsafeSlow(pktMaxSize);\r\n        }\r\n\r\n        //------)>\r\n\r\n        function pack(data, target) {\r\n            const isArray = Array.isArray(data);\r\n            const outTg = !!target;\r\n\r\n            let fieldIdx = schLen,\r\n                pktSize = pktOffset,\r\n\r\n                input = data,\r\n                field,\r\n                name, type, bytes, bufType, bufBytes, bufAType, bufABytes;\r\n\r\n            //--------]>\r\n\r\n            target = target || pktDataBuf;\r\n\r\n            //--------]>\r\n\r\n            while(fieldIdx--) {\r\n                field = fields[fieldIdx];\r\n                [name, type, bytes, bufType, bufBytes, bufAType, bufABytes] = field;\r\n\r\n                //------]>\r\n\r\n                if(!isPrimitive && data) {\r\n                    input = data[isArray ? fieldIdx : name];\r\n                }\r\n\r\n                //------]>\r\n\r\n                if((type & TYPE_STR) || (type & TYPE_BIN)) {\r\n                    if(type & TYPE_JSON) {\r\n                        input = JSON.stringify(input);\r\n                    }\r\n\r\n                    if(input) {\r\n                        bytes += bufAType[0] = type & TYPE_BIN ? blitBuffer(input, target, pktSize + bytes, bufType.byteLength - bytes) : target.write(input, pktSize + bytes, bufType.byteLength - bytes);\r\n\r\n                        if(isBigEndian) {\r\n                            target[pktSize] = bufABytes[1];\r\n                            target[pktSize + 1] = bufABytes[0];\r\n                        }\r\n                        else {\r\n                            target[pktSize] = bufABytes[0];\r\n                            target[pktSize + 1] = bufABytes[1];\r\n                        }\r\n\r\n                        pktSize += bytes;\r\n\r\n                    }\r\n                    else {\r\n                        target[pktSize] = 0;\r\n                        target[pktSize + 1] = 0;\r\n\r\n                        pktSize += 2;\r\n                    }\r\n                }\r\n                else {\r\n                    if(input == null || isNaN(input) || !isFinite(input)) {\r\n                        bufType[0] = 0;\r\n                    }\r\n                    else {\r\n                        bufType[0] = input;\r\n\r\n                        if(isBigEndian && bufType.byteLength > 1) {\r\n                            bufBytes.reverse();\r\n                        }\r\n                    }\r\n\r\n                    let tIdx = 0;\r\n\r\n                    while(tIdx < bytes) {\r\n                        target[pktSize] = bufBytes[tIdx];\r\n\r\n                        ++pktSize;\r\n                        ++tIdx;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //--------]>\r\n\r\n            return !outTg && pktSize < pktMaxSize ? target.slice(0, pktSize) : target;\r\n        }\r\n\r\n        function unpack(bin, offset, length, cbEndInfo, target, asCopy = !holderRecreated, asArray = dataHolderAsArray) {\r\n            if(!schLen) {\r\n                if(cbEndInfo) {\r\n                    cbEndInfo(pktOffset);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            if(!bin || typeof(bin) !== \"object\" || bin.byteLength < pktMinSize) {\r\n                return void(0);\r\n            }\r\n\r\n            if(!isPrimitive) {\r\n                target = target || (asCopy ? (asArray ? new Array() : Object.create(null)) : (asArray ? pktDataHolderArr : pktDataHolderObj));\r\n            }\r\n\r\n            //--------]>\r\n\r\n            let fieldIdx = schLen,\r\n                curOffset = offset + pktOffset;\r\n\r\n            const pktOffsetStart = curOffset;\r\n\r\n            //--------]>\r\n\r\n            while(fieldIdx--) {\r\n                let field,\r\n                   [name, type, bytes, bufType, bufBytes, bufAType, bufABytes] = fields[fieldIdx];\r\n\r\n                //------]>\r\n\r\n                for(let i = 0; i < bytes; ++i) {\r\n                    if(curOffset >= length) {\r\n                        return void(0);\r\n                    }\r\n\r\n                    if(bufAType) {\r\n                        bufABytes[i] = bin[curOffset];\r\n                    }\r\n                    else {\r\n                        bufBytes[i] = bin[curOffset];\r\n                    }\r\n\r\n                    ++curOffset;\r\n                }\r\n\r\n                //------]>\r\n\r\n                if((type & TYPE_STR) || (type & TYPE_BIN)) {\r\n                    if(isBigEndian) {\r\n                        bufABytes.reverse();\r\n                    }\r\n\r\n                    //--------]>\r\n\r\n                    const byteLen = bufAType[0];\r\n\r\n                    //--------]>\r\n\r\n                    if(!byteLen) {\r\n                        field = (type & TYPE_BIN) || (type & TYPE_JSON) ? null : \"\";\r\n                    }\r\n                    else if(byteLen >= length || byteLen > bufType.byteLength) {\r\n                        return void(0);\r\n                    }\r\n                    else {\r\n                        if(type & TYPE_BIN) {\r\n                            const buf = holyBuffer.allocUnsafeSlow(byteLen);\r\n\r\n                            for(let i = 0; i < byteLen; ++i, ++curOffset) {\r\n                                buf[i] = bin[curOffset];\r\n                            }\r\n\r\n                            field = buf;\r\n                        }\r\n                        else {\r\n                            if(bin instanceof(holyBuffer)) {\r\n                                field = bin.toString(\"utf8\", curOffset, curOffset + byteLen);\r\n                            }\r\n                            else if(holyBuffer.from) {\r\n                                field = holyBuffer.from(bin).toString(\"utf8\", curOffset, curOffset + byteLen);\r\n                            }\r\n                            else {\r\n                                field = bufType.toString.call(bin, \"utf8\", curOffset, curOffset + byteLen);\r\n                            }\r\n\r\n                            curOffset += byteLen;\r\n                        }\r\n\r\n                        if(type & TYPE_JSON) {\r\n                            try {\r\n                                field = JSON.parse(field);\r\n                            }\r\n                            catch(e) {\r\n                                field = null;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(isBigEndian && bufType.byteLength > 1) {\r\n                        bufBytes.reverse();\r\n                    }\r\n\r\n                    field = bufType[0];\r\n                }\r\n\r\n                //------]>\r\n\r\n                if(isPrimitive) {\r\n                    target = field;\r\n                }\r\n                else {\r\n                    if(asArray) {\r\n                        name = fieldIdx;\r\n                    }\r\n\r\n                    target[name] = field;\r\n                }\r\n            }\r\n\r\n            if(cbEndInfo) {\r\n                cbEndInfo(pktOffset + curOffset - pktOffsetStart);\r\n            }\r\n\r\n            //--------]>\r\n\r\n            return target;\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        function buildTypedBuf(type, size) {\r\n            if(type & TYPE_BIN) {\r\n                return [Uint16Array.BYTES_PER_ELEMENT, holyBuffer.allocUnsafeSlow((size || 1024) + Uint16Array.BYTES_PER_ELEMENT), new Uint16Array(1)];\r\n            }\r\n\r\n            if(type & TYPE_JSON) {\r\n                return [Uint16Array.BYTES_PER_ELEMENT, holyBuffer.allocUnsafeSlow((size || 8192) + Uint16Array.BYTES_PER_ELEMENT), new Uint16Array(1)];\r\n            }\r\n\r\n            if(type & TYPE_STR) {\r\n                return [Uint16Array.BYTES_PER_ELEMENT, holyBuffer.allocUnsafeSlow((size || 256) + Uint16Array.BYTES_PER_ELEMENT), new Uint16Array(1)];\r\n            }\r\n\r\n            switch(type) {\r\n                case TYPE_INT:\r\n                    switch(size) {\r\n                        case 8: return [Int8Array.BYTES_PER_ELEMENT, new Int8Array(1)];\r\n                        case 16: return [Int16Array.BYTES_PER_ELEMENT, new Int16Array(1)];\r\n                        case 32: return [Int32Array.BYTES_PER_ELEMENT, new Int32Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n\r\n                case TYPE_UINT:\r\n                    switch(size) {\r\n                        case 8: return [Uint8Array.BYTES_PER_ELEMENT, new Uint8Array(1)];\r\n                        case 16: return [Uint16Array.BYTES_PER_ELEMENT, new Uint16Array(1)];\r\n                        case 32: return [Uint32Array.BYTES_PER_ELEMENT, new Uint32Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n\r\n                case TYPE_FLOAT:\r\n                    switch(size) {\r\n                        case 32: return [Float32Array.BYTES_PER_ELEMENT, new Float32Array(1)];\r\n                        case 64: return [Float64Array.BYTES_PER_ELEMENT, new Float64Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n                default:\r\n                    throw new Error(`Unknown type: ${type}`);\r\n            }\r\n        }\r\n\r\n        function getTypeId(type) {\r\n            switch(type) {\r\n                case \"b\":\r\n                case \"bin\":\r\n                    return TYPE_BIN;\r\n\r\n                case \"j\":\r\n                case \"json\":\r\n                    return TYPE_STR | TYPE_JSON;\r\n\r\n                case \"s\":\r\n                case \"str\":\r\n                    return TYPE_STR;\r\n\r\n                case \"i\":\r\n                case \"int\":\r\n                    return TYPE_INT;\r\n\r\n                case \"u\":\r\n                case \"uint\":\r\n                    return TYPE_UINT;\r\n\r\n                case \"f\":\r\n                case \"float\":\r\n                    return TYPE_FLOAT;\r\n\r\n                default:\r\n                    throw new Error(`Unknown type: ${type}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    function blitBuffer(src, dst, offset, length) {\r\n        if(!length) {\r\n            return 0;\r\n        }\r\n\r\n        //-------]>\r\n\r\n        const dstLen = dst.length;\r\n        const srcLen = src.length;\r\n\r\n        let i, t;\r\n\r\n        //-------]>\r\n\r\n        for(i = 0; i < length; ++i) {\r\n            t = i + offset;\r\n\r\n            if(t >= dstLen || i >= srcLen) {\r\n                break;\r\n            }\r\n\r\n            dst[t] = src[i];\r\n        }\r\n\r\n        //-------]>\r\n\r\n        return i;\r\n    }\r\n})();\r\n\r\n//-----------------------------------------------------\r\n\r\nmodule.exports = bPack;\r\n\r\nreturn bPack; })({});"]}